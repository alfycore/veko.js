// Fichier de l'auto-updater qui va v√©rifier si c'est la bonne version de veko 
const fs = require('fs');
const path = require('path');
const https = require('https');
const crypto = require('crypto');
const os = require('os');
const { execSync, spawn } = require('child_process');
const chalk = require('chalk');

class AutoUpdater {
    static packageJsonPath = path.join(process.cwd(), 'package.json');
    static backupDir = path.join(process.cwd(), '.veko-backups');
    static configPath = path.join(process.cwd(), '.veko-updater.json');
    static logPath = path.join(process.cwd(), '.veko-updater.log');
    static currentVersion = null;
    static latestVersion = null;
    static config = {};
    static stats = {
        totalUpdates: 0,
        lastUpdate: null,
        lastCheck: null,
        rollbacks: 0
    };

    // üé® Styles visuels simplifi√©s
    static styles = {
        title: chalk.bold.cyan,
        success: chalk.bold.green,
        error: chalk.bold.red,
        warning: chalk.bold.yellow,
        info: chalk.bold.blue,
        dim: chalk.dim.gray,
        highlight: chalk.bold.white,
        accent: chalk.magenta,
        progress: chalk.green.bold,
        version: chalk.cyan.bold,
        menu: chalk.yellow.bold,
        separator: chalk.dim('‚îÄ'.repeat(60))
    };

    // üîß Configuration par d√©faut
    static defaultConfig = {
        autoCheck: true,
        autoUpdate: false,
        checkInterval: 3600000, // 1 heure
        backupCount: 5,
        allowPrerelease: false,
        allowBeta: false,
        securityCheck: true,
        progressBar: true,
        notifications: true,
        rollbackOnFailure: true,
        updateChannel: 'stable', // stable, beta, alpha
        customRegistry: null,
        excludeFiles: ['.git', 'node_modules', '.veko-backups'],
        skipDependencies: false
    };

    // üöÄ Initialisation robuste
    static async init() {
        try {
            await this.loadConfig();
            await this.loadStats();
            this.createDirectories();
            
            if (this.config.autoCheck) {
                this.scheduleAutoCheck();
            }
            
            return true;
        } catch (error) {
            console.error(`[Auto-updater] Erreur d'initialisation: ${error.message}`);
            return false; // Ne pas bloquer l'application en cas d'erreur
        }
    }

    // üìÅ Cr√©ation des r√©pertoires n√©cessaires avec gestion d'erreurs
    static createDirectories() {
        try {
            [this.backupDir].forEach(dir => {
                if (!fs.existsSync(dir)) {
                    fs.mkdirSync(dir, { recursive: true });
                }
            });
        } catch (error) {
            console.warn(`[Auto-updater] Impossible de cr√©er les r√©pertoires: ${error.message}`);
        }
    }

    // ‚öôÔ∏è Chargement de la configuration avec fallback
    static async loadConfig() {
        try {
            if (fs.existsSync(this.configPath)) {
                const configData = fs.readFileSync(this.configPath, 'utf8');
                this.config = { ...this.defaultConfig, ...JSON.parse(configData) };
            } else {
                this.config = { ...this.defaultConfig };
                await this.saveConfig();
            }
        } catch (error) {
            console.warn(`[Auto-updater] Erreur de configuration: ${error.message}`);
            this.config = { ...this.defaultConfig };
        }
    }

    // üíæ Sauvegarde de la configuration avec s√©curit√©
    static async saveConfig() {
        try {
            fs.writeFileSync(this.configPath, JSON.stringify(this.config, null, 2));
        } catch (error) {
            console.warn(`[Auto-updater] Impossible de sauvegarder la configuration: ${error.message}`);
        }
    }

    // üìä Chargement des statistiques de mani√®re s√©curis√©e
    static async loadStats() {
        try {
            if (fs.existsSync(this.packageJsonPath)) {
                const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
                if (packageJson.vekoUpdaterStats) {
                    this.stats = { ...this.stats, ...packageJson.vekoUpdaterStats };
                }
            }
        } catch (error) {
            console.warn(`[Auto-updater] Impossible de charger les statistiques: ${error.message}`);
        }
    }

    // üîÑ Programmation de la v√©rification automatique s√©curis√©e
    static scheduleAutoCheck() {
        try {
            setInterval(async () => {
                try {
                    await this.checkForUpdates(true);
                } catch (error) {
                    // Capture l'erreur pour ne pas arr√™ter le processus
                    console.error(`[Auto-updater] Erreur de v√©rification: ${error.message}`);
                }
            }, this.config.checkInterval);
        } catch (error) {
            console.error(`[Auto-updater] Erreur de programmation: ${error.message}`);
        }
    }

    // üìä Barre de progression
    static showProgress(current, total, message = '') {
        if (!this.config.progressBar) return;
        
        const percentage = Math.round((current / total) * 100);
        const barLength = 40;
        const filledLength = Math.round(barLength * percentage / 100);
        const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
        
        process.stdout.write(`\r${this.styles.progress(bar)} ${percentage}% ${message}`);
        
        if (current === total) {
            console.log(''); // Nouvelle ligne √† la fin
        }
    }

    // üéØ Animation de chargement
    static loadingAnimation(message) {
        if (!process.stdout.isTTY) return { stop: () => {} };
        
        const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
        let i = 0;
        const loader = setInterval(() => {
            process.stdout.write(`\r${this.styles.info(frames[i++ % frames.length])} ${message}`);
        }, 80);
        
        // Retourne une fonction pour arr√™ter l'animation
        return {
            stop: (finalMessage = '') => {
                clearInterval(loader);
                process.stdout.write(`\r${' '.repeat(message.length + 10)}\r`);
                if (finalMessage) {
                    console.log(finalMessage);
                }
            }
        };
    }

    // üîç V√©rification de mise √† jour avec timeout et animation
    static async checkForUpdates(silent = false) {
        try {
            // Animation si pas en mode silencieux
            const animation = !silent ? 
                this.loadingAnimation('V√©rification des mises √† jour...') : 
                { stop: () => {} };
            
            this.stats.lastCheck = new Date().toISOString();
            
            const currentVersion = this.getCurrentVersion();
            if (!currentVersion) {
                animation.stop(!silent ? 
                    this.styles.warning('‚ö†Ô∏è Veko n\'est pas install√©.') : '');
                return { hasUpdate: false, needsInstall: true };
            }
            
            // Timeout pour √©viter les boucles infinies
            const versionInfoPromise = Promise.race([
                this.getVersionInfo(),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout lors de la v√©rification')), 5000)
                )
            ]);
            
            const versionInfo = await versionInfoPromise;
            
            if (!versionInfo) {
                animation.stop(!silent ? 
                    this.styles.error('‚ùå Impossible de r√©cup√©rer les informations de version') : '');
                throw new Error('Impossible de r√©cup√©rer les informations de version');
            }
            
            const comparison = this.compareVersions(currentVersion, versionInfo.latest);
            
            if (comparison < 0) {
                animation.stop(!silent ? 
                    this.styles.warning(`‚ö†Ô∏è Nouvelle version disponible! ${currentVersion} ‚Üí ${versionInfo.latest}`) : '');
                
                if (!silent) {
                    console.log(this.styles.info(`   Actuelle: ${this.styles.version(currentVersion)}`));
                    console.log(this.styles.info(`   Derni√®re: ${this.styles.version(versionInfo.latest)}`));
                    
                    if (versionInfo.changelog) {
                        console.log(this.styles.info('\nüìù Notes de mise √† jour:'));
                        console.log(this.styles.dim(`${versionInfo.changelog.substring(0, 500)}...`));
                    }
                }
                
                return { 
                    hasUpdate: true, 
                    currentVersion, 
                    latestVersion: versionInfo.latest,
                    changelog: versionInfo.changelog,
                    security: versionInfo.security
                };
            } else {
                animation.stop(!silent ? 
                    this.styles.success(`‚úÖ Version √† jour (${currentVersion})`) : '');
                return { hasUpdate: false, currentVersion };
            }
            
        } catch (error) {
            if (!silent) {
                console.log(this.styles.error(`‚ùå ${error.message}`));
            }
            this.log('error', `Erreur lors de la v√©rification: ${error.message}`);
            return { hasUpdate: false, error: error.message };
        }
    }

    // üîê V√©rification de s√©curit√© et int√©grit√©
    static async verifyPackageIntegrity(packagePath, expectedIntegrity) {
        if (!this.config.securityCheck || !expectedIntegrity) {
            return true;
        }
        
        try {
            const fileBuffer = fs.readFileSync(packagePath);
            const hash = crypto.createHash('sha512').update(fileBuffer).digest('base64');
            const calculatedIntegrity = `sha512-${hash}`;
            
            return calculatedIntegrity === expectedIntegrity;
        } catch (error) {
            this.log('error', `Erreur lors de la v√©rification d'int√©grit√©: ${error.message}`);
            return false;
        }
    }

    // üíæ Syst√®me de backup am√©lior√©
    static async createBackup() {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = path.join(this.backupDir, `backup-${timestamp}`);
            
            console.log(this.styles.info('üíæ Cr√©ation du backup...'));
            
            // Copie les fichiers essentiels
            const filesToBackup = [
                'package.json',
                'package-lock.json',
                'yarn.lock',
                'node_modules/veko'
            ];
            
            fs.mkdirSync(backupPath, { recursive: true });
            
            for (let i = 0; i < filesToBackup.length; i++) {
                const file = filesToBackup[i];
                const sourcePath = path.join(process.cwd(), file);
                const destPath = path.join(backupPath, file);
                
                if (fs.existsSync(sourcePath)) {
                    fs.mkdirSync(path.dirname(destPath), { recursive: true });
                    
                    if (fs.statSync(sourcePath).isDirectory()) {
                        await this.copyDirectory(sourcePath, destPath);
                    } else {
                        fs.copyFileSync(sourcePath, destPath);
                    }
                }
                
                this.showProgress(i + 1, filesToBackup.length, 'Backup en cours...');
            }
            
            // Nettoyage des anciens backups
            this.cleanupOldBackups();
            
            console.log(this.styles.success(`‚úÖ Backup cr√©√©: ${backupPath}`));
            return backupPath;
            
        } catch (error) {
            this.log('error', `Erreur lors de la cr√©ation du backup: ${error.message}`);
            throw error;
        }
    }

    // üìÅ Copie r√©cursive de r√©pertoires
    static async copyDirectory(source, destination) {
        if (!fs.existsSync(destination)) {
            fs.mkdirSync(destination, { recursive: true });
        }
        
        const items = fs.readdirSync(source);
        
        for (const item of items) {
            const sourcePath = path.join(source, item);
            const destPath = path.join(destination, item);
            
            if (fs.statSync(sourcePath).isDirectory()) {
                await this.copyDirectory(sourcePath, destPath);
            } else {
                fs.copyFileSync(sourcePath, destPath);
            }
        }
    }

    // üßπ Nettoyage des anciens backups
    static cleanupOldBackups() {
        try {
            const backups = fs.readdirSync(this.backupDir)
                .filter(dir => dir.startsWith('backup-'))
                .map(dir => ({
                    name: dir,
                    path: path.join(this.backupDir, dir),
                    mtime: fs.statSync(path.join(this.backupDir, dir)).mtime
                }))
                .sort((a, b) => b.mtime - a.mtime);
            
            if (backups.length > this.config.backupCount) {
                const toDelete = backups.slice(this.config.backupCount);
                toDelete.forEach(backup => {
                    fs.rmSync(backup.path, { recursive: true, force: true });
                    this.log('info', `Backup supprim√©: ${backup.name}`);
                });
            }
        } catch (error) {
            this.log('error', `Erreur lors du nettoyage des backups: ${error.message}`);
        }
    }

    // üîÑ Rollback vers un backup sp√©cifi√©
    static async rollback(backupPath) {
        try {
            // Si le chemin n'est pas sp√©cifi√©, utiliser le plus r√©cent
            if (!backupPath) {
                const backups = fs.readdirSync(this.backupDir)
                    .filter(dir => dir.startsWith('backup-'))
                    .map(dir => path.join(this.backupDir, dir))
                    .sort((a, b) => 
                        fs.statSync(b).mtime.getTime() - fs.statSync(a).mtime.getTime()
                    );
                
                if (backups.length === 0) {
                    throw new Error('Aucun backup disponible');
                }
                
                backupPath = backups[0];
                console.log(this.styles.info(`Utilisation du backup le plus r√©cent: ${path.basename(backupPath)}`));
            }
            
            if (!fs.existsSync(backupPath)) {
                throw new Error(`Backup non trouv√©: ${backupPath}`);
            }
            
            console.log(this.styles.info('üîÑ Restauration en cours...'));
            
            const backupFiles = fs.readdirSync(backupPath);
            
            for (let i = 0; i < backupFiles.length; i++) {
                const file = backupFiles[i];
                const sourcePath = path.join(backupPath, file);
                const destPath = path.join(process.cwd(), file);
                
                if (fs.statSync(sourcePath).isDirectory()) {
                    if (fs.existsSync(destPath)) {
                        fs.rmSync(destPath, { recursive: true, force: true });
                    }
                    await this.copyDirectory(sourcePath, destPath);
                } else {
                    fs.copyFileSync(sourcePath, destPath);
                }
                
                this.showProgress(i + 1, backupFiles.length, 'Restauration...');
            }
            
            this.stats.rollbacks++;
            await this.saveStats();
            
            console.log(this.styles.success('‚úÖ Rollback effectu√© avec succ√®s!'));
            return true;
            
        } catch (error) {
            this.log('error', `Erreur lors du rollback: ${error.message}`);
            console.log(this.styles.error(`‚ùå ${error.message}`));
            return false;
        }
    }

    // üöÄ Mise √† jour am√©lior√©e
    static async performUpdate(versionInfo) {
        let backupPath = null;
        
        try {
            // Cr√©ation du backup
            backupPath = await this.createBackup();
            
            console.log(this.styles.info('üöÄ Mise √† jour en cours...'));
            
            // D√©sinstallation de l'ancienne version
            console.log(this.styles.info('üì¶ D√©sinstallation de l\'ancienne version...'));
            execSync('npm uninstall veko', { stdio: 'pipe' });
            
            // Installation de la nouvelle version
            console.log(this.styles.info(`üì¶ Installation de veko@${versionInfo.latestVersion}...`));
            
            const installProcess = spawn('npm', ['install', `veko@${versionInfo.latestVersion}`], {
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            let installOutput = '';
            installProcess.stdout.on('data', (data) => {
                installOutput += data.toString();
            });
            
            installProcess.stderr.on('data', (data) => {
                installOutput += data.toString();
            });
            
            await new Promise((resolve, reject) => {
                installProcess.on('close', (code) => {
                    if (code === 0) {
                        resolve();
                    } else {
                        reject(new Error(`Installation √©chou√©e avec le code ${code}: ${installOutput}`));
                    }
                });
            });
            
            // V√©rification post-installation
            const newVersion = this.getCurrentVersion();
            if (newVersion !== versionInfo.latestVersion) {
                throw new Error('La version install√©e ne correspond pas √† la version attendue');
            }
            
            // Mise √† jour des statistiques
            this.stats.totalUpdates++;
            this.stats.lastUpdate = new Date().toISOString();
            await this.saveStats();
            
            console.log(this.styles.success(`‚úÖ Mise √† jour r√©ussie vers la version ${versionInfo.latestVersion}!`));
            
            if (this.config.notifications) {
                this.showNotification('Veko mis √† jour avec succ√®s!', `Version ${versionInfo.latestVersion}`);
            }
            
            return true;
            
        } catch (error) {
            this.log('error', `Erreur lors de la mise √† jour: ${error.message}`);
            console.log(this.styles.error(`‚ùå Erreur: ${error.message}`));
            
            if (this.config.rollbackOnFailure && backupPath) {
                console.log(this.styles.warning('üîÑ Rollback automatique...'));
                await this.rollback(backupPath);
            }
            
            return false;
        }
    }

    // üîî Notification syst√®me
    static showNotification(title, message) {
        try {
            const platform = os.platform();
            
            if (platform === 'darwin') {
                execSync(`osascript -e 'display notification "${message}" with title "${title}"'`);
            } else if (platform === 'win32') {
                // Windows notification (n√©cessite des outils suppl√©mentaires)
                console.log(this.styles.info(`üîî ${title}: ${message}`));
            } else if (platform === 'linux') {
                execSync(`notify-send "${title}" "${message}"`);
            }
        } catch (error) {
            // Ignore les erreurs de notification
        }
    }

    // üìä Affichage des statistiques
    static displayStats() {
        console.log(this.styles.title('\nüìä Statistiques de l\'auto-updater'));
        console.log(this.styles.separator);
        console.log(this.styles.info(`Mises √† jour totales: ${this.stats.totalUpdates}`));
        console.log(this.styles.info(`Rollbacks effectu√©s: ${this.stats.rollbacks}`));
        console.log(this.styles.info(`Derni√®re v√©rification: ${this.stats.lastCheck || 'Jamais'}`));
        console.log(this.styles.info(`Derni√®re mise √† jour: ${this.stats.lastUpdate || 'Jamais'}`));
        console.log(this.styles.info(`Version actuelle: ${this.getCurrentVersion() || 'Non install√©'}`));
        console.log(this.styles.info(`Canal de mise √† jour: ${this.config.updateChannel}`));
        console.log(this.styles.separator);
    }

    // ‚öôÔ∏è Configuration de base
    static async configureSettings(options = {}) {
        try {
            // Mise √† jour des options de configuration avec les param√®tres pass√©s
            if (options && typeof options === 'object') {
                this.config = { ...this.config, ...options };
                await this.saveConfig();
                return true;
            }
            
            console.log(this.styles.title('\n‚öôÔ∏è Configuration actuelle:'));
            console.log(this.styles.separator);
            console.log(this.styles.info(`V√©rification auto:   ${this.config.autoCheck ? '‚úÖ' : '‚ùå'}`));
            console.log(this.styles.info(`Mise √† jour auto:    ${this.config.autoUpdate ? '‚úÖ' : '‚ùå'}`));
            console.log(this.styles.info(`Canal:               ${this.config.updateChannel}`));
            console.log(this.styles.info(`Backups:             ${this.config.backupCount}`));
            console.log(this.styles.info(`V√©rification s√©curit√©: ${this.config.securityCheck ? '‚úÖ' : '‚ùå'}`));
            console.log(this.styles.info(`Notifications:       ${this.config.notifications ? '‚úÖ' : '‚ùå'}`));
            console.log(this.styles.info(`Rollback auto:       ${this.config.rollbackOnFailure ? '‚úÖ' : '‚ùå'}`));
            console.log(this.styles.separator);
            
            return true;
        } catch (error) {
            console.log(this.styles.error(`‚ùå Erreur: ${error.message}`));
            return false;
        }
    }

    // üîå Gestion des WebSocket avec s√©curit√© am√©lior√©e
    static async getVersionInfo() {
        return new Promise((resolve, reject) => {
            try {
                const registry = this.config.customRegistry || 'registry.npmjs.org';
                const options = {
                    hostname: registry,
                    path: '/veko',
                    method: 'GET',
                    headers: {
                        'User-Agent': `veko-auto-updater/2.0.0 (${os.platform()} ${os.arch()})`,
                        'Accept': 'application/json'
                    },
                    timeout: 5000 // Timeout explicite
                };

                const req = https.request(options, (res) => {
                    let data = '';

                    res.on('data', (chunk) => {
                        // Limite la taille des donn√©es pour √©viter les attaques DoS
                        if (data.length > 1000000) {  // Limite √† ~1MB
                            req.destroy();
                            reject(new Error('R√©ponse trop volumineuse'));
                            return;
                        }
                        data += chunk;
                    });

                    res.on('end', () => {
                        if (res.statusCode !== 200) {
                            reject(new Error(`Erreur HTTP ${res.statusCode}`));
                            return;
                        }
                        
                        try {
                            const packageInfo = JSON.parse(data);
                            const channel = this.config.updateChannel;
                            
                            if (!packageInfo['dist-tags']) {
                                reject(new Error('Format de r√©ponse invalide'));
                                return;
                            }
                            
                            let version;
                            switch (channel) {
                                case 'beta':
                                    version = packageInfo['dist-tags'].beta || packageInfo['dist-tags'].latest;
                                    break;
                                case 'alpha':
                                    version = packageInfo['dist-tags'].alpha || packageInfo['dist-tags'].beta || packageInfo['dist-tags'].latest;
                                    break;
                                case 'stable':
                                default:
                                    version = packageInfo['dist-tags'].latest;
                            }
                            
                            if (!version || !packageInfo.versions || !packageInfo.versions[version]) {
                                reject(new Error(`Version invalide: ${version}`));
                                return;
                            }
                            
                            const versionInfo = packageInfo.versions[version];
                            
                            resolve({
                                latest: version,
                                changelog: versionInfo?.changelog || (packageInfo.readme?.slice(0, 500) || 'Pas de notes de mise √† jour disponibles'),
                                security: versionInfo?.security || false,
                                size: versionInfo?.dist?.unpackedSize,
                                integrity: versionInfo?.dist?.integrity,
                                publishDate: versionInfo?.time
                            });
                        } catch (error) {
                            reject(new Error(`Erreur lors du parsing: ${error.message}`));
                        }
                    });
                });

                // Gestion explicite des erreurs
                req.on('error', (error) => {
                    reject(new Error(`Erreur de connexion: ${error.message}`));
                });

                // Timeout manuels pour plus de contr√¥le
                req.setTimeout(10000, () => {
                    req.destroy();
                    reject(new Error('Timeout de connexion'));
                });

                req.end();
            } catch (error) {
                reject(new Error(`Erreur lors de la requ√™te: ${error.message}`));
            }
        });
    }

    // ‚ùì Aide simplifi√©e
    static showHelp() {
        console.log(this.styles.title('\n‚ùì Aide - Veko Auto-Updater'));
        console.log(this.styles.separator);
        console.log('Commandes disponibles:');
        console.log('  veko update check        - V√©rifier les mises √† jour');
        console.log('  veko update update       - Mettre √† jour maintenant');
        console.log('  veko update config       - Afficher la configuration');
        console.log('  veko update rollback     - Effectuer un rollback');
        console.log('  veko update stats        - Afficher les statistiques');
        console.log('  veko update fix          - R√©parer l\'auto-updater');
        console.log('  veko update help         - Afficher l\'aide');
        console.log('  veko update version      - Afficher la version');
        console.log(this.styles.separator);
    }

    // üéØ Fonction principale am√©lior√©e
    static async checkAndUpdate() {
        try {
            await this.init();
            
            // Animation de chargement
            const animation = this.loadingAnimation('V√©rification des mises √† jour...');
            
            // V√©rification si package.json existe
            if (!fs.existsSync(this.packageJsonPath)) {
                animation.stop(this.styles.error('‚ùå Le fichier package.json est manquant.'));
                console.log(this.styles.error('Un fichier package.json est n√©cessaire.'));
                return false;
            }

            // V√©rification des mises √† jour avec timeout
            const updateInfo = await Promise.race([
                this.checkForUpdates(true),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout lors de la v√©rification')), 5000)
                )
            ]);
            
            animation.stop();
            
            if (updateInfo.needsInstall) {
                console.log(this.styles.warning('‚ö†Ô∏è Veko n\'est pas install√©. Installation en cours...'));
                try {
                    execSync('npm install veko@latest', { stdio: 'inherit' });
                    console.log(this.styles.success('‚úÖ Veko install√© avec succ√®s!'));
                    return true;
                } catch (error) {
                    console.log(this.styles.error(`‚ùå Erreur lors de l'installation: ${error.message}`));
                    return false;
                }
            }
            
            if (updateInfo.hasUpdate) {
                console.log(this.styles.warning(`‚ö†Ô∏è Nouvelle version disponible! ${updateInfo.currentVersion} ‚Üí ${updateInfo.latestVersion}`));
                if (this.config.autoUpdate) {
                    return await this.performUpdate(updateInfo);
                } else {
                    console.log(this.styles.info('Pour mettre √† jour: veko update update'));
                }
            } else if (updateInfo.error) {
                console.log(this.styles.error(`‚ùå Erreur: ${updateInfo.error}`));
                return false;
            } else {
                console.log(this.styles.success('‚úÖ Veko est √† jour!'));
            }
            
            return true;
            
        } catch (error) {
            this.log('error', `Erreur inattendue: ${error.message}`);
            console.log(this.styles.error(`‚ùå Erreur inattendue: ${error.message}`));
            return false;
        }
    }

    // üìÑ R√©cup√©ration de la version actuelle plus robuste
    static getCurrentVersion() {
        try {
            if (!fs.existsSync(this.packageJsonPath)) {
                return null;
            }

            const packageJson = JSON.parse(fs.readFileSync(this.packageJsonPath, 'utf8'));
            
            const vekoVersion = packageJson.dependencies?.veko || 
                               packageJson.devDependencies?.veko ||
                               packageJson.peerDependencies?.veko;

            if (!vekoVersion) {
                return null;
            }

            this.currentVersion = vekoVersion.replace(/[\^~>=<]/g, '');
            return this.currentVersion;
        } catch (error) {
            console.warn(`[Auto-updater] Erreur lors de la lecture de package.json: ${error.message}`);
            return null;
        }
    }

    // üîç Comparaison de versions am√©lior√©e avec support des pre-release
    static compareVersions(version1, version2) {
        const parseVersion = (version) => {
            const [main, prerelease] = version.split('-');
            const [major, minor, patch] = main.split('.').map(n => parseInt(n));
            return { major, minor, patch, prerelease: prerelease || null };
        };
        
        const v1 = parseVersion(version1);
        const v2 = parseVersion(version2);
        
        // Compare major.minor.patch
        if (v1.major !== v2.major) return v1.major - v2.major;
        if (v1.minor !== v2.minor) return v1.minor - v2.minor;
        if (v1.patch !== v2.patch) return v1.patch - v2.patch;
        
        // Compare prerelease
        if (v1.prerelease && !v2.prerelease) return -1;
        if (!v1.prerelease && v2.prerelease) return 1;
        if (v1.prerelease && v2.prerelease) {
            return v1.prerelease.localeCompare(v2.prerelease);
        }
        
        return 0;
    }

    // üìè Calcul de la taille d'un r√©pertoire
    static getDirectorySize(dirPath) {
        let totalSize = 0;
        
        try {
            const walk = (dir) => {
                const files = fs.readdirSync(dir);
                files.forEach(file => {
                    const filePath = path.join(dir, file);
                    const stats = fs.statSync(filePath);
                    
                    if (stats.isDirectory()) {
                        walk(filePath);
                    } else {
                        totalSize += stats.size;
                    }
                });
            };
            
            walk(dirPath);
        } catch (error) {
            console.warn(`[Auto-updater] Erreur lors du calcul de la taille: ${error.message}`);
        }
        
        return totalSize;
    }

    // üìä Formatage des tailles
    static formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // üìù Syst√®me de logs am√©lior√©
    static log(level, message) {
        try {
            const timestamp = new Date().toISOString();
            const logEntry = `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;
            
            // Affichage console avec couleurs
            const colorMap = {
                error: this.styles.error,
                warn: this.styles.warning,
                info: this.styles.info,
                success: this.styles.success,
                debug: this.styles.dim
            };
            
            const colorFunc = colorMap[level] || chalk.white;
            console.log(colorFunc(`[${level.toUpperCase()}] ${message}`));
            
            // √âcriture dans le fichier de log, mais seulement si accessible
            try {
                if (!fs.existsSync(path.dirname(this.logPath))) {
                    fs.mkdirSync(path.dirname(this.logPath), { recursive: true });
                }
                fs.appendFileSync(this.logPath, logEntry);
                this.rotateLogFile();
            } catch (error) {
                // Ignore les erreurs d'√©criture dans le fichier
            }
        } catch (error) {
            // √âviter les boucles infinies avec console.error
            console.error(`Erreur dans le syst√®me de log: ${error.message}`);
        }
    }

    // üîÑ Rotation des logs
    static rotateLogFile() {
        try {
            const stats = fs.statSync(this.logPath);
            if (stats.size > 1024 * 1024) { // 1MB
                const rotatedPath = this.logPath + '.' + Date.now();
                fs.renameSync(this.logPath, rotatedPath);
                fs.writeFileSync(this.logPath, '');
                
                // Nettoyer les anciens logs
                const logDir = path.dirname(this.logPath);
                const files = fs.readdirSync(logDir)
                    .filter(file => file.startsWith(path.basename(this.logPath) + '.'))
                    .sort();
                
                // Garder seulement les 5 derniers logs
                if (files.length > 5) {
                    files.slice(0, files.length - 5).forEach(file => {
                        fs.unlinkSync(path.join(logDir, file));
                    });
                }
            }
        } catch (error) {
            // Ignorer les erreurs
        }
    }

    // üîß CLI Handler pour les commandes
    static async handleCLI(args = []) {
        const command = args[0];
        
        try {
            switch (command) {
                case 'check':
                    return await this.checkForUpdates();
                
                case 'update':
                    return await this.performUpdateCommand();
                
                case 'config':
                    if (args[1] && args[2]) {
                        // Mise √† jour d'une option sp√©cifique
                        return await this.updateSetting(args[1], args[2]);
                    }
                    return await this.configureSettings();
                
                case 'rollback':
                    return await this.rollback(args[1]);
                
                case 'stats':
                case 'status':
                    return this.displayStats();
                
                case 'fix':
                    return await this.fixInstallation();
                
                case 'help':
                case '--help':
                case '-h':
                    return this.showHelp();
                
                case 'version':
                case '--version':
                case '-v':
                    return this.showVersion();
                
                case undefined:
                default:
                    // Par d√©faut, check seulement
                    return await this.checkForUpdates();
            }
        } catch (error) {
            console.error(`[Auto-updater] Erreur de commande: ${error.message}`);
            if (process.env.DEBUG) {
                console.error(error.stack);
            }
            return false;
        }
    }
    
    // üîß Mise √† jour d'un param√®tre
    static async updateSetting(key, value) {
        // Convertir la valeur en fonction du type attendu
        let parsedValue = value;
        if (value === 'true') parsedValue = true;
        if (value === 'false') parsedValue = false;
        if (!isNaN(parseInt(value))) parsedValue = parseInt(value);
        
        // V√©rifier que la cl√© existe dans la configuration
        if (!(key in this.defaultConfig)) {
            console.log(this.styles.error(`‚ùå Param√®tre inconnu: ${key}`));
            return false;
        }
        
        // Mettre √† jour la configuration
        this.config[key] = parsedValue;
        await this.saveConfig();
        
        console.log(this.styles.success(`‚úÖ Param√®tre mis √† jour: ${key} = ${parsedValue}`));
        return true;
    }
    
    // üöÄ Commande de mise √† jour sp√©cifique
    static async performUpdateCommand() {
        try {
            // V√©rifier les mises √† jour
            const updateInfo = await this.checkForUpdates(true);
            
            if (updateInfo.hasUpdate) {
                console.log(this.styles.warning(`‚ö†Ô∏è Mise √† jour disponible: ${updateInfo.currentVersion} ‚Üí ${updateInfo.latestVersion}`));
                console.log(this.styles.info('üöÄ D√©marrage de la mise √† jour...'));
                
                return await this.performUpdate(updateInfo);
            } else if (updateInfo.needsInstall) {
                console.log(this.styles.warning('‚ö†Ô∏è Veko n\'est pas install√©. Installation en cours...'));
                
                try {
                    execSync('npm install veko@latest', { stdio: 'inherit' });
                    console.log(this.styles.success('‚úÖ Veko install√© avec succ√®s!'));
                    return true;
                } catch (error) {
                    console.log(this.styles.error(`‚ùå Erreur lors de l'installation: ${error.message}`));
                    return false;
                }
            } else {
                console.log(this.styles.success('‚úÖ Veko est d√©j√† √† jour!'));
                return true;
            }
        } catch (error) {
            console.log(this.styles.error(`‚ùå Erreur lors de la mise √† jour: ${error.message}`));
            return false;
        }
    }

    // üìã Afficher version
    static showVersion() {
        const version = this.getCurrentVersion() || 'non install√©';
        console.log(`Veko v${version}`);
        console.log(`Auto-updater v1.1.5`);
        return true;
    }
    
    // üîß R√©parer l'installation
    static async fixInstallation() {
        console.log(this.styles.title('\nüîß R√©paration de l\'installation'));
        console.log(this.styles.separator);
        
        try {
            // 1. Cr√©er les r√©pertoires n√©cessaires
            console.log('1. V√©rification des r√©pertoires');
            this.createDirectories();
            console.log(this.styles.success('‚úÖ R√©pertoires v√©rifi√©s'));
            
            // 2. R√©initialiser la configuration
            console.log('2. R√©initialisation de la configuration');
            this.config = { ...this.defaultConfig };
            await this.saveConfig();
            console.log(this.styles.success('‚úÖ Configuration r√©initialis√©e'));
            
            // 3. V√©rifier package.json
            console.log('3. V√©rification de package.json');
            if (!fs.existsSync(this.packageJsonPath)) {
                console.log(this.styles.warning('‚ö†Ô∏è package.json manquant'));
                console.log(this.styles.error('‚ùå Impossible de continuer sans package.json'));
                return false;
            } else {
                console.log(this.styles.success('‚úÖ package.json trouv√©'));
                
                // V√©rifier l'installation de veko
                const vekoInstalled = this.getCurrentVersion();
                if (!vekoInstalled) {
                    console.log(this.styles.warning('‚ö†Ô∏è Veko non install√©, tentative d\'installation'));
                    try {
                        execSync('npm install veko@latest', { stdio: 'inherit' });
                        console.log(this.styles.success('‚úÖ Veko install√©'));
                    } catch (error) {
                        console.log(this.styles.error(`‚ùå Erreur d'installation: ${error.message}`));
                    }
                } else {
                    console.log(this.styles.success(`‚úÖ Veko v${vekoInstalled} install√©`));
                }
            }
            
            // 4. Reset du log
            console.log('4. Nettoyage des logs');
            if (fs.existsSync(this.logPath)) {
                fs.writeFileSync(this.logPath, '');
                console.log(this.styles.success('‚úÖ Logs nettoy√©s'));
            }
            
            console.log(this.styles.separator);
            console.log(this.styles.success('üéâ R√©paration termin√©e!'));
            console.log(this.styles.info('üí° Utilisez "veko update check" pour v√©rifier les mises √† jour'));
            
            return true;
        } catch (error) {
            console.log(this.styles.error(`‚ùå Erreur lors de la r√©paration: ${error.message}`));
            return false;
        }
    }
}

module.exports = AutoUpdater;